# Workflow Name
name: "infra-cicd"

# Workflow Triggers
on:
  push:
    branches:
      - iac-cicd
    paths:  
      - terraform/**
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform (deploy or destroy)'
        required: true
        default: 'deploy'
        type: choice
        options:
          - deploy
          - destroy

# Environment Variables
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  S3_BUCKET: ${{ secrets.S3_BUCKET }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  EKS_CLUSTER: ${{ vars.EKS_CLUSTER }}

# Define Jobs
jobs:
  terraform:
    name: "Deploy Infra with Terraform on AWS"
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'deploy')

    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform init
        id: init
        run: terraform init -backend-config="bucket=$S3_BUCKET"

      - name: Terraform validate
        id: validate
        run: terraform validate

      - name: Terraform plan
        id: plan
        run: terraform plan -no-color -input=false -out planfile
        continue-on-error: true

      - name: Terraform plan status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform apply
        id: apply
        run: terraform apply -auto-approve -input=false -parallelism=1 planfile

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Kubernetes config
        id: getconfig
        if: steps.apply.outcome == 'success'
        run: aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER }} --region ${{ env.AWS_REGION }} 

      - name: Install Ingress controller
        if: steps.apply.outcome == 'success' && steps.getconfig.outcome == 'success'
        run: kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.12.0-beta.0/deploy/static/provider/aws/deploy.yaml
  
  destroy:
    name: "Destroy Infra on AWS"
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'

    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform init
        id: init
        run: terraform init -backend-config="bucket=$S3_BUCKET"
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Kubernetes config
        id: getconfig
        run: aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER }} --region ${{ env.AWS_REGION }} 

      - name: Delete Ingress controller
        run: kubectl delete -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.12.0-beta.0/deploy/static/provider/aws/deploy.yaml

      - name: Empty ECR Repository
        run: |
          REPOSITORY_NAME=${{ vars.ECR_REPO }}
          IMAGES=$(aws ecr list-images --repository-name $REPOSITORY_NAME --query 'imageIds[*]' --output json)
          if [[ "$IMAGES" != "[]" ]]; then
            echo "Deleting images from $REPOSITORY_NAME..."
            aws ecr batch-delete-image --repository-name $REPOSITORY_NAME --image-ids "$IMAGES"
          else
            echo "No images found in $REPOSITORY_NAME."
          fi
      
      - name: Terraform destroy
        id: destroy
        run: terraform destroy -auto-approve -input=false